/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as AuthRouteImport } from './routes/_auth'
import { Route as AuthIndexRouteImport } from './routes/_auth.index'
import { Route as AuthRegisterRouteImport } from './routes/auth/register'
import { Route as AuthLoginRouteImport } from './routes/auth/login'
import { Route as AuthSlideShowRouteImport } from './routes/_auth/slide-show'
import { Route as AuthSettingIndexRouteImport } from './routes/_auth/setting/index'
import { Route as AuthSettingSocialLinkRouteImport } from './routes/_auth/setting/social-link'
import { Route as AuthSettingLogoRouteImport } from './routes/_auth/setting/logo'
import { Route as AuthSettingHomePageSlideShowRouteImport } from './routes/_auth/setting/home-page-slide-show'
import { Route as AuthSettingFaqRouteImport } from './routes/_auth/setting/faq'
import { Route as AuthProductProductsRouteImport } from './routes/_auth/product/products'
import { Route as AuthProductProductCategoriesRouteImport } from './routes/_auth/product/product-categories'
import { Route as AuthMusicTracksRouteImport } from './routes/_auth/music/tracks'
import { Route as AuthMusicGenresRouteImport } from './routes/_auth/music/genres'
import { Route as AuthMusicDataCollectRouteImport } from './routes/_auth/music/data-collect'
import { Route as AuthMusicAlbumsRouteImport } from './routes/_auth/music/albums'

const AuthRoute = AuthRouteImport.update({
  id: '/_auth',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthIndexRoute = AuthIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AuthRoute,
} as any)
const AuthRegisterRoute = AuthRegisterRouteImport.update({
  id: '/auth/register',
  path: '/auth/register',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthLoginRoute = AuthLoginRouteImport.update({
  id: '/auth/login',
  path: '/auth/login',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthSlideShowRoute = AuthSlideShowRouteImport.update({
  id: '/slide-show',
  path: '/slide-show',
  getParentRoute: () => AuthRoute,
} as any)
const AuthSettingIndexRoute = AuthSettingIndexRouteImport.update({
  id: '/setting/',
  path: '/setting/',
  getParentRoute: () => AuthRoute,
} as any)
const AuthSettingSocialLinkRoute = AuthSettingSocialLinkRouteImport.update({
  id: '/setting/social-link',
  path: '/setting/social-link',
  getParentRoute: () => AuthRoute,
} as any)
const AuthSettingLogoRoute = AuthSettingLogoRouteImport.update({
  id: '/setting/logo',
  path: '/setting/logo',
  getParentRoute: () => AuthRoute,
} as any)
const AuthSettingHomePageSlideShowRoute =
  AuthSettingHomePageSlideShowRouteImport.update({
    id: '/setting/home-page-slide-show',
    path: '/setting/home-page-slide-show',
    getParentRoute: () => AuthRoute,
  } as any)
const AuthSettingFaqRoute = AuthSettingFaqRouteImport.update({
  id: '/setting/faq',
  path: '/setting/faq',
  getParentRoute: () => AuthRoute,
} as any)
const AuthProductProductsRoute = AuthProductProductsRouteImport.update({
  id: '/product/products',
  path: '/product/products',
  getParentRoute: () => AuthRoute,
} as any)
const AuthProductProductCategoriesRoute =
  AuthProductProductCategoriesRouteImport.update({
    id: '/product/product-categories',
    path: '/product/product-categories',
    getParentRoute: () => AuthRoute,
  } as any)
const AuthMusicTracksRoute = AuthMusicTracksRouteImport.update({
  id: '/music/tracks',
  path: '/music/tracks',
  getParentRoute: () => AuthRoute,
} as any)
const AuthMusicGenresRoute = AuthMusicGenresRouteImport.update({
  id: '/music/genres',
  path: '/music/genres',
  getParentRoute: () => AuthRoute,
} as any)
const AuthMusicDataCollectRoute = AuthMusicDataCollectRouteImport.update({
  id: '/music/data-collect',
  path: '/music/data-collect',
  getParentRoute: () => AuthRoute,
} as any)
const AuthMusicAlbumsRoute = AuthMusicAlbumsRouteImport.update({
  id: '/music/albums',
  path: '/music/albums',
  getParentRoute: () => AuthRoute,
} as any)

export interface FileRoutesByFullPath {
  '/slide-show': typeof AuthSlideShowRoute
  '/auth/login': typeof AuthLoginRoute
  '/auth/register': typeof AuthRegisterRoute
  '/': typeof AuthIndexRoute
  '/music/albums': typeof AuthMusicAlbumsRoute
  '/music/data-collect': typeof AuthMusicDataCollectRoute
  '/music/genres': typeof AuthMusicGenresRoute
  '/music/tracks': typeof AuthMusicTracksRoute
  '/product/product-categories': typeof AuthProductProductCategoriesRoute
  '/product/products': typeof AuthProductProductsRoute
  '/setting/faq': typeof AuthSettingFaqRoute
  '/setting/home-page-slide-show': typeof AuthSettingHomePageSlideShowRoute
  '/setting/logo': typeof AuthSettingLogoRoute
  '/setting/social-link': typeof AuthSettingSocialLinkRoute
  '/setting': typeof AuthSettingIndexRoute
}
export interface FileRoutesByTo {
  '/slide-show': typeof AuthSlideShowRoute
  '/auth/login': typeof AuthLoginRoute
  '/auth/register': typeof AuthRegisterRoute
  '/': typeof AuthIndexRoute
  '/music/albums': typeof AuthMusicAlbumsRoute
  '/music/data-collect': typeof AuthMusicDataCollectRoute
  '/music/genres': typeof AuthMusicGenresRoute
  '/music/tracks': typeof AuthMusicTracksRoute
  '/product/product-categories': typeof AuthProductProductCategoriesRoute
  '/product/products': typeof AuthProductProductsRoute
  '/setting/faq': typeof AuthSettingFaqRoute
  '/setting/home-page-slide-show': typeof AuthSettingHomePageSlideShowRoute
  '/setting/logo': typeof AuthSettingLogoRoute
  '/setting/social-link': typeof AuthSettingSocialLinkRoute
  '/setting': typeof AuthSettingIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_auth': typeof AuthRouteWithChildren
  '/_auth/slide-show': typeof AuthSlideShowRoute
  '/auth/login': typeof AuthLoginRoute
  '/auth/register': typeof AuthRegisterRoute
  '/_auth/': typeof AuthIndexRoute
  '/_auth/music/albums': typeof AuthMusicAlbumsRoute
  '/_auth/music/data-collect': typeof AuthMusicDataCollectRoute
  '/_auth/music/genres': typeof AuthMusicGenresRoute
  '/_auth/music/tracks': typeof AuthMusicTracksRoute
  '/_auth/product/product-categories': typeof AuthProductProductCategoriesRoute
  '/_auth/product/products': typeof AuthProductProductsRoute
  '/_auth/setting/faq': typeof AuthSettingFaqRoute
  '/_auth/setting/home-page-slide-show': typeof AuthSettingHomePageSlideShowRoute
  '/_auth/setting/logo': typeof AuthSettingLogoRoute
  '/_auth/setting/social-link': typeof AuthSettingSocialLinkRoute
  '/_auth/setting/': typeof AuthSettingIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/slide-show'
    | '/auth/login'
    | '/auth/register'
    | '/'
    | '/music/albums'
    | '/music/data-collect'
    | '/music/genres'
    | '/music/tracks'
    | '/product/product-categories'
    | '/product/products'
    | '/setting/faq'
    | '/setting/home-page-slide-show'
    | '/setting/logo'
    | '/setting/social-link'
    | '/setting'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/slide-show'
    | '/auth/login'
    | '/auth/register'
    | '/'
    | '/music/albums'
    | '/music/data-collect'
    | '/music/genres'
    | '/music/tracks'
    | '/product/product-categories'
    | '/product/products'
    | '/setting/faq'
    | '/setting/home-page-slide-show'
    | '/setting/logo'
    | '/setting/social-link'
    | '/setting'
  id:
    | '__root__'
    | '/_auth'
    | '/_auth/slide-show'
    | '/auth/login'
    | '/auth/register'
    | '/_auth/'
    | '/_auth/music/albums'
    | '/_auth/music/data-collect'
    | '/_auth/music/genres'
    | '/_auth/music/tracks'
    | '/_auth/product/product-categories'
    | '/_auth/product/products'
    | '/_auth/setting/faq'
    | '/_auth/setting/home-page-slide-show'
    | '/_auth/setting/logo'
    | '/_auth/setting/social-link'
    | '/_auth/setting/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  AuthRoute: typeof AuthRouteWithChildren
  AuthLoginRoute: typeof AuthLoginRoute
  AuthRegisterRoute: typeof AuthRegisterRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_auth': {
      id: '/_auth'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_auth/': {
      id: '/_auth/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof AuthIndexRouteImport
      parentRoute: typeof AuthRoute
    }
    '/auth/register': {
      id: '/auth/register'
      path: '/auth/register'
      fullPath: '/auth/register'
      preLoaderRoute: typeof AuthRegisterRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/auth/login': {
      id: '/auth/login'
      path: '/auth/login'
      fullPath: '/auth/login'
      preLoaderRoute: typeof AuthLoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_auth/slide-show': {
      id: '/_auth/slide-show'
      path: '/slide-show'
      fullPath: '/slide-show'
      preLoaderRoute: typeof AuthSlideShowRouteImport
      parentRoute: typeof AuthRoute
    }
    '/_auth/setting/': {
      id: '/_auth/setting/'
      path: '/setting'
      fullPath: '/setting'
      preLoaderRoute: typeof AuthSettingIndexRouteImport
      parentRoute: typeof AuthRoute
    }
    '/_auth/setting/social-link': {
      id: '/_auth/setting/social-link'
      path: '/setting/social-link'
      fullPath: '/setting/social-link'
      preLoaderRoute: typeof AuthSettingSocialLinkRouteImport
      parentRoute: typeof AuthRoute
    }
    '/_auth/setting/logo': {
      id: '/_auth/setting/logo'
      path: '/setting/logo'
      fullPath: '/setting/logo'
      preLoaderRoute: typeof AuthSettingLogoRouteImport
      parentRoute: typeof AuthRoute
    }
    '/_auth/setting/home-page-slide-show': {
      id: '/_auth/setting/home-page-slide-show'
      path: '/setting/home-page-slide-show'
      fullPath: '/setting/home-page-slide-show'
      preLoaderRoute: typeof AuthSettingHomePageSlideShowRouteImport
      parentRoute: typeof AuthRoute
    }
    '/_auth/setting/faq': {
      id: '/_auth/setting/faq'
      path: '/setting/faq'
      fullPath: '/setting/faq'
      preLoaderRoute: typeof AuthSettingFaqRouteImport
      parentRoute: typeof AuthRoute
    }
    '/_auth/product/products': {
      id: '/_auth/product/products'
      path: '/product/products'
      fullPath: '/product/products'
      preLoaderRoute: typeof AuthProductProductsRouteImport
      parentRoute: typeof AuthRoute
    }
    '/_auth/product/product-categories': {
      id: '/_auth/product/product-categories'
      path: '/product/product-categories'
      fullPath: '/product/product-categories'
      preLoaderRoute: typeof AuthProductProductCategoriesRouteImport
      parentRoute: typeof AuthRoute
    }
    '/_auth/music/tracks': {
      id: '/_auth/music/tracks'
      path: '/music/tracks'
      fullPath: '/music/tracks'
      preLoaderRoute: typeof AuthMusicTracksRouteImport
      parentRoute: typeof AuthRoute
    }
    '/_auth/music/genres': {
      id: '/_auth/music/genres'
      path: '/music/genres'
      fullPath: '/music/genres'
      preLoaderRoute: typeof AuthMusicGenresRouteImport
      parentRoute: typeof AuthRoute
    }
    '/_auth/music/data-collect': {
      id: '/_auth/music/data-collect'
      path: '/music/data-collect'
      fullPath: '/music/data-collect'
      preLoaderRoute: typeof AuthMusicDataCollectRouteImport
      parentRoute: typeof AuthRoute
    }
    '/_auth/music/albums': {
      id: '/_auth/music/albums'
      path: '/music/albums'
      fullPath: '/music/albums'
      preLoaderRoute: typeof AuthMusicAlbumsRouteImport
      parentRoute: typeof AuthRoute
    }
  }
}

interface AuthRouteChildren {
  AuthSlideShowRoute: typeof AuthSlideShowRoute
  AuthIndexRoute: typeof AuthIndexRoute
  AuthMusicAlbumsRoute: typeof AuthMusicAlbumsRoute
  AuthMusicDataCollectRoute: typeof AuthMusicDataCollectRoute
  AuthMusicGenresRoute: typeof AuthMusicGenresRoute
  AuthMusicTracksRoute: typeof AuthMusicTracksRoute
  AuthProductProductCategoriesRoute: typeof AuthProductProductCategoriesRoute
  AuthProductProductsRoute: typeof AuthProductProductsRoute
  AuthSettingFaqRoute: typeof AuthSettingFaqRoute
  AuthSettingHomePageSlideShowRoute: typeof AuthSettingHomePageSlideShowRoute
  AuthSettingLogoRoute: typeof AuthSettingLogoRoute
  AuthSettingSocialLinkRoute: typeof AuthSettingSocialLinkRoute
  AuthSettingIndexRoute: typeof AuthSettingIndexRoute
}

const AuthRouteChildren: AuthRouteChildren = {
  AuthSlideShowRoute: AuthSlideShowRoute,
  AuthIndexRoute: AuthIndexRoute,
  AuthMusicAlbumsRoute: AuthMusicAlbumsRoute,
  AuthMusicDataCollectRoute: AuthMusicDataCollectRoute,
  AuthMusicGenresRoute: AuthMusicGenresRoute,
  AuthMusicTracksRoute: AuthMusicTracksRoute,
  AuthProductProductCategoriesRoute: AuthProductProductCategoriesRoute,
  AuthProductProductsRoute: AuthProductProductsRoute,
  AuthSettingFaqRoute: AuthSettingFaqRoute,
  AuthSettingHomePageSlideShowRoute: AuthSettingHomePageSlideShowRoute,
  AuthSettingLogoRoute: AuthSettingLogoRoute,
  AuthSettingSocialLinkRoute: AuthSettingSocialLinkRoute,
  AuthSettingIndexRoute: AuthSettingIndexRoute,
}

const AuthRouteWithChildren = AuthRoute._addFileChildren(AuthRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  AuthRoute: AuthRouteWithChildren,
  AuthLoginRoute: AuthLoginRoute,
  AuthRegisterRoute: AuthRegisterRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
